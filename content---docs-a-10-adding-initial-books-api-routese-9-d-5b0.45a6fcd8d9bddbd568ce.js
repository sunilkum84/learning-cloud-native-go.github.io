(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{40:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return p}),n.d(t,"rightToc",function(){return i}),n.d(t,"default",function(){return d});n(0);var r=n(68);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p={id:"a10.adding_initial_books_api_routes",title:"Adding initial books API routes"},i=[{value:"Implementing initial books API Handlers",id:"implementing-initial-books-api-handlers",children:[]},{value:"Implementing Content-Type JSON middleware",id:"implementing-content-type-json-middleware",children:[]}],l={rightToc:i},s="wrapper";function d(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(s,a({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"implementing-initial-books-api-handlers"},"Implementing initial books API Handlers"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"As mentioned earlier, in here we are building a ",Object(r.b)("strong",{parentName:"li"},"RESTful ",Object(r.b)("a",a({parentName:"strong"},{href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"}),"CRUD")," API for a bookshelf"),". So, let's create initial handler functions for the ",Object(r.b)("em",{parentName:"li"},"books")," API under ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package app\n\nimport (\n    "net/http"\n)\n\nfunc (app *App) HandleListBooks(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusOK)\n    w.Write([]byte("[]"))\n}\n\nfunc (app *App) HandleCreateBook(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusCreated)\n}\n\nfunc (app *App) HandleReadBook(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusOK)\n    w.Write([]byte("{}"))\n}\n\nfunc (app *App) HandleUpdateBook(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusAccepted)\n}\n\nfunc (app *App) HandleDeleteBook(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusAccepted)\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We need to update ",Object(r.b)("inlineCode",{parentName:"li"},"app/router/router.go")," to add the handlers to the router.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'// Routes for books\nr.Method("GET", "/books", handler.NewHandler(a.HandleListBooks, l))\nr.Method("POST", "/books", handler.NewHandler(a.HandleCreateBook, l))\nr.Method("GET", "/books/{id}", handler.NewHandler(a.HandleReadBook, l))\nr.Method("PUT", "/books/{id}", handler.NewHandler(a.HandleUpdateBook, l))\nr.Method("DELETE", "/books/{id}", handler.NewHandler(a.HandleDeleteBook, l))\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Rebuild and rerun the application. And then, test ",Object(r.b)("inlineCode",{parentName:"li"},"/books")," API by using a REST client application like ",Object(r.b)("a",a({parentName:"li"},{href:"https://insomnia.rest/"}),"Insomnia REST Client")," or ",Object(r.b)("a",a({parentName:"li"},{href:"https://www.getpostman.com/downloads/"}),"Postman"),". You should see request logs like these on each request.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'app_1  | {"level":"info","received_time":"2019-08-06T06:29:21Z","method":"GET","url":"/books","header_size":43,"body_size":0,"agent":"insomnia/6.5.4","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.3","status":200,"resp_header_size":2,"resp_body_size":2,"latency":0.016297,"time":"2019-08-06T06:29:21Z"}\n\napp_1  | {"level":"info","received_time":"2019-08-06T06:29:28Z","method":"POST","url":"/books","header_size":62,"body_size":0,"agent":"insomnia/6.5.4","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.3","status":201,"resp_header_size":2,"resp_body_size":0,"latency":0.013048,"time":"2019-08-06T06:29:28Z"}\n\napp_1  | {"level":"info","received_time":"2019-08-06T06:29:35Z","method":"GET","url":"/books/1","header_size":43,"body_size":0,"agent":"insomnia/6.5.4","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.3","status":200,"resp_header_size":2,"resp_body_size":2,"latency":0.013994,"time":"2019-08-06T06:29:35Z"}\n\napp_1  | {"level":"info","received_time":"2019-08-06T06:29:41Z","method":"PUT","url":"/books/1","header_size":62,"body_size":0,"agent":"insomnia/6.5.4","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.3","status":202,"resp_header_size":2,"resp_body_size":0,"latency":0.020926,"time":"2019-08-06T06:29:41Z"}\n\napp_1  | {"level":"info","received_time":"2019-08-06T06:29:48Z","method":"DELETE","url":"/books/1","header_size":43,"body_size":0,"agent":"insomnia/6.5.4","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.3","status":202,"resp_header_size":2,"resp_body_size":0,"latency":0.013027,"time":"2019-08-06T06:29:48Z"}\n')),Object(r.b)("h2",{id:"implementing-content-type-json-middleware"},"Implementing Content-Type JSON middleware"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Instead of setting HTTP header ",Object(r.b)("inlineCode",{parentName:"li"},'"Content-Type": "application/json"')," on each handler code, we can create a ",Object(r.b)("a",a({parentName:"li"},{href:"https://github.com/go-chi/chi#middleware-handlers"}),"router middleware")," for it under ",Object(r.b)("inlineCode",{parentName:"li"},"app/router/middleware/content_type_json.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package middleware\n\nimport "net/http"\n\nfunc ContentTypeJson(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set("Content-Type", "application/json;charset=utf8")\n        next.ServeHTTP(w, r)\n    })\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Also, we can add tests under ",Object(r.b)("inlineCode",{parentName:"li"},"app/router/middleware/content_type_json_test.go")," to test the middleware.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package middleware_test\n\nimport (\n    "fmt"\n    "net/http"\n    "net/http/httptest"\n    "testing"\n\n    "myapp/app/router/middleware"\n)\n\nvar (\n    expRespBody    = "{\\"message\\":\\"Hello World!\\"}"\n    expContentType = "application/json;charset=utf8"\n)\n\nfunc TestContentTypeJson(t *testing.T) {\n    r, _ := http.NewRequest("GET", "/", nil)\n    rr := httptest.NewRecorder()\n\n    middleware.ContentTypeJson(http.HandlerFunc(sampleHandlerFunc())).ServeHTTP(rr, r)\n    response := rr.Result()\n\n    if respBody := rr.Body.String(); respBody != expRespBody {\n        t.Errorf("Wrong response body:  got %v want %v ", respBody, expRespBody)\n    }\n\n    if status := response.StatusCode; status != http.StatusOK {\n        t.Errorf("Wrong status code: got %v want %v", status, http.StatusOK)\n    }\n\n    if contentType := response.Header.Get("Content-type"); contentType != expContentType {\n        t.Errorf("Wrong status code: got %v want %v", contentType, expContentType)\n    }\n}\n\nfunc sampleHandlerFunc() func(w http.ResponseWriter, r *http.Request) {\n    return func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprint(w, expRespBody)\n    }\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Then, update ",Object(r.b)("inlineCode",{parentName:"li"},"app/router/router.go")," to attach above middleware to API routes. In here, we prefix all API routes with ",Object(r.b)("inlineCode",{parentName:"li"},"/api/v1")," as well.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'// First import "myapp/app/router/middleware"\n\n// Routes for APIs\nr.Route("/api/v1", func(r chi.Router) {\n    r.Use(middleware.ContentTypeJson)\n\n    // Routes for books\n    r.Method("GET", "/books", handler.NewHandler(a.HandleListBooks, l))\n    r.Method("POST", "/books", handler.NewHandler(a.HandleCreateBook, l))\n    r.Method("GET", "/books/{id}", handler.NewHandler(a.HandleReadBook, l))\n    r.Method("PUT", "/books/{id}", handler.NewHandler(a.HandleUpdateBook, l))\n    r.Method("DELETE", "/books/{id}", handler.NewHandler(a.HandleDeleteBook, l))\n})\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Rebuild and rerun the application. And now, you should see ",Object(r.b)("inlineCode",{parentName:"li"},'"Content-Type": "application/json"')," headers in API responses.")))}d.isMDXComponent=!0},68:function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return c});var r=n(0),a=n.n(r),o=a.a.createContext({}),p=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=p(e.components);return a.a.createElement(o.Provider,{value:t},e.children)};var l="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=function(e){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),l=p(t),d=n,c=l[o+"."+d]||l[d]||s[d]||r;return t?a.a.createElement(c,Object.assign({},i,{components:t})):a.a.createElement(c,i)};function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[l]="string"==typeof e?e:r,p[1]=i;for(var c=2;c<o;c++)p[c]=n[c];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);