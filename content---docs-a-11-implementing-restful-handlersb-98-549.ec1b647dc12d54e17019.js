(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{56:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return l}),t.d(n,"default",function(){return s});t(0);var r=t(70);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i={id:"a11.implementing_restful_handlers",title:"Implementing RESTful handlers"},l=[{value:"Completing list books functionality",id:"completing-list-books-functionality",children:[]},{value:"Completing read book functionality",id:"completing-read-book-functionality",children:[]},{value:"Completing delete book functionality",id:"completing-delete-book-functionality",children:[]},{value:"Completing create book functionality",id:"completing-create-book-functionality",children:[]},{value:"Completing update book functionality",id:"completing-update-book-functionality",children:[]}],p={rightToc:l},c="wrapper";function s(e){var n=e.components,t=a(e,["components"]);return Object(r.b)(c,o({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's complete the functionality of each handler functions."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"💭 To make examples simpler and easier to understand for different levels of programmers, in here I am using models and ",Object(r.b)("a",o({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#the-repository-pattern"}),"repositories"),". This may not be the most idiomatic way of structuring Go applications but, this is one of hassle-free structure, even an absolute newcomer can understand.")),Object(r.b)("h2",{id:"completing-list-books-functionality"},"Completing list books functionality"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use ",Object(r.b)("inlineCode",{parentName:"li"},"model/book.go")," to save models related to books. ",Object(r.b)("inlineCode",{parentName:"li"},"Book struct")," is used ",Object(r.b)("strong",{parentName:"li"},"to map database records")," and ",Object(r.b)("inlineCode",{parentName:"li"},"BookDto struct")," is used ",Object(r.b)("strong",{parentName:"li"},"to control how to show the model to outside"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'package model\n\nimport (\n    "time"\n\n    "github.com/jinzhu/gorm"\n)\n\ntype Books []*Book\n\ntype Book struct {\n    gorm.Model\n    Title         string\n    Author        string\n    PublishedDate time.Time\n    ImageUrl      string\n    Description   string\n}\n\ntype BookDtos []*BookDto\n\ntype BookDto struct {\n    ID            uint   `json:"id"`\n    Title         string `json:"title"`\n    Author        string `json:"author"`\n    PublishedDate string `json:"published_date"`\n    ImageUrl      string `json:"image_url"`\n    Description   string `json:"description"`\n}\n\nfunc (b Book) ToDto() *BookDto {\n    return &BookDto{\n        ID:            b.ID,\n        Title:         b.Title,\n        Author:        b.Author,\n        PublishedDate: b.PublishedDate.Format("2006-01-02"),\n        ImageUrl:      b.ImageUrl,\n        Description:   b.Description,\n    }\n}\n\nfunc (bs Books) ToDto() BookDtos {\n    dtos := make([]*BookDto, len(bs))\n    for i, b := range bs {\n        dtos[i] = b.ToDto()\n    }\n\n    return dtos\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",o({parentName:"li"},{href:"http://gorm.io/"}),"GORM")," provides multiple ways to ",Object(r.b)("a",o({parentName:"li"},{href:"http://gorm.io/docs/query.html"}),"query data from the database"),". To get the all records from a batabase table, we can use its ",Object(r.b)("inlineCode",{parentName:"li"},"Find()")," method. So, let’s create the ",Object(r.b)("inlineCode",{parentName:"li"},"ListBooks()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"repository/book.go")," to get all books records.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'package repository\n\nimport (\n    "github.com/jinzhu/gorm"\n\n    "myapp/model"\n)\n\nfunc ListBooks(db *gorm.DB) (model.Books, error) {\n    books := make([]*model.Book, 0)\n    if err := db.Find(&books).Error; err != nil {\n        return nil, err\n    }\n\n    return books, nil\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Now, let's complete the ",Object(r.b)("inlineCode",{parentName:"li"},"HandleListBooks()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),". If an error occurs inside the handler, we ",Object(r.b)("strong",{parentName:"li"},"log the actual error and use a static message to create the error response"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'import (\n    "encoding/json"\n    "fmt"\n    "net/http"\n\n    "myapp/repository"\n)\n\nfunc (app *App) HandleListBooks(w http.ResponseWriter, r *http.Request) {\n    books, err := repository.ListBooks(app.db)\n    if err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrDataAccessFailure)\n        return\n    }\n\n    if books == nil {\n        fmt.Fprint(w, "[]")\n        return\n    }\n\n    dtos := books.ToDto()\n    if err := json.NewEncoder(w).Encode(dtos); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrJsonCreationFailure)\n        return\n    }\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We save those static error messages inside ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/app.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'const (\n    appErrDataAccessFailure   = "data access failure"\n    appErrJsonCreationFailure = "json creation failure"\n)\n')),Object(r.b)("h2",{id:"completing-read-book-functionality"},"Completing read book functionality"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To get a single record from the database, we can use GORM’s ",Object(r.b)("inlineCode",{parentName:"li"},"First()")," method. Let’s add ",Object(r.b)("inlineCode",{parentName:"li"},"ReadBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"repository/book.go")," to query a single book record.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'import (\n    "github.com/jinzhu/gorm"\n\n    "myapp/model"\n)\n\nfunc ReadBook(db *gorm.DB, id uint) (*model.Book, error) {\n    book := &model.Book{}\n    if err := db.Where("id = ?", id).First(&book).Error; err != nil {\n        return nil, err\n    }\n\n    return book, nil\n}\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"💡 Because of we use the primary key to get data, we can use ",Object(r.b)("inlineCode",{parentName:"p"},"db.First(&book, id)")," directly, without using its ",Object(r.b)("inlineCode",{parentName:"p"},"Where()")," method.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"This is how we can complete ",Object(r.b)("inlineCode",{parentName:"li"},"HandleReadBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'import (\n    "encoding/json"\n    "fmt"\n    "net/http"\n    "strconv"\n\n    "github.com/go-chi/chi"\n    "github.com/jinzhu/gorm"\n\n    "myapp/repository"\n)\n\nfunc (app *App) HandleReadBook(w http.ResponseWriter, r *http.Request) {\n    id, err := strconv.ParseUint(chi.URLParam(r, "id"), 0, 64)\n    if err != nil || id == 0 {\n        app.logger.Info().Msgf("can not parse ID: %v", id)\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        return\n    }\n\n    book, err := repository.ReadBook(app.db, uint(id))\n    if err != nil {\n        if err == gorm.ErrRecordNotFound {\n            w.WriteHeader(http.StatusNotFound)\n            return\n        }\n\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrDataAccessFailure)\n        return\n    }\n\n    dto := book.ToDto()\n    if err := json.NewEncoder(w).Encode(dto); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrJsonCreationFailure)\n        return\n    }\n}\n')),Object(r.b)("h2",{id:"completing-delete-book-functionality"},"Completing delete book functionality"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To delete a database record, we can use ",Object(r.b)("a",o({parentName:"li"},{href:"http://gorm.io/docs/delete.html%60"}),"GORM’s ",Object(r.b)("inlineCode",{parentName:"a"},"Delete()"))," method. So, let’s add ",Object(r.b)("inlineCode",{parentName:"li"},"DeleteBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"repository/book.go")," to delete a single book record.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'func DeleteBook(db *gorm.DB, id uint) error {\n    book := &model.Book{}\n    if err := db.Where("id = ?", id).Delete(&book).Error; err != nil {\n        return err\n    }\n\n    return nil\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Then, let’s complete the ",Object(r.b)("inlineCode",{parentName:"li"},"HandleDeleteBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'func (app *App) HandleDeleteBook(w http.ResponseWriter, r *http.Request) {\n    id, err := strconv.ParseUint(chi.URLParam(r, "id"), 0, 64)\n    if err != nil || id == 0 {\n        app.logger.Info().Msgf("can not parse ID: %v", id)\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        return\n    }\n\n    if err := repository.DeleteBook(app.db, uint(id)); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrDataAccessFailure)\n        return\n    }\n\n    app.logger.Info().Msgf("Book deleted: %d", id)\n    w.WriteHeader(http.StatusAccepted)\n}\n')),Object(r.b)("h2",{id:"completing-create-book-functionality"},"Completing create book functionality"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To create a new database record, we can use ",Object(r.b)("a",o({parentName:"li"},{href:"http://gorm.io/docs/create.html"}),"GORM’s ",Object(r.b)("inlineCode",{parentName:"a"},"Create()"))," method. So, let’s add ",Object(r.b)("inlineCode",{parentName:"li"},"CreateBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"repository/book.go")," to create a new book record.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),"func CreateBook(db *gorm.DB, book *model.Book) (*model.Book, error) {\n    if err := db.Create(book).Error; err != nil {\n        return nil, err\n    }\n\n    return book, nil\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Let’s update ",Object(r.b)("inlineCode",{parentName:"li"},"model/book.go"),". Input structures may not match with the models or ",Object(r.b)("a",o({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Data_transfer_object"}),"dtos"),". So in here, I am using a different structure for the form. But, if both input and output/ model structures are same, we can reuse same structures without creating new structures for forms.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'type BookForm struct {\n    Title         string `json:"title"`\n    Author        string `json:"author"`\n    PublishedDate string `json:"published_date"`\n    ImageUrl      string `json:"image_url"`\n    Description   string `json:"description"`\n}\n\nfunc (f *BookForm) ToModel() (*Book, error) {\n    pubDate, err := time.Parse("2006-01-02", f.PublishedDate)\n    if err != nil {\n        return nil, err\n    }\n\n    return &Book{\n        Title:         f.Title,\n        Author:        f.Author,\n        PublishedDate: pubDate,\n        ImageUrl:      f.ImageUrl,\n        Description:   f.Description,\n    }, nil\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Then, let’s complete the ",Object(r.b)("inlineCode",{parentName:"li"},"HandleCreateBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'// import "myapp/model"\n\nfunc (app *App) HandleCreateBook(w http.ResponseWriter, r *http.Request) {\n    form := &model.BookForm{}\n    if err := json.NewDecoder(r.Body).Decode(form); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrFormDecodingFailure)\n        return\n    }\n\n    bookModel, err := form.ToModel()\n    if err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrFormDecodingFailure)\n        return\n    }\n\n    book, err := repository.CreateBook(app.db, bookModel)\n    if err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrDataCreationFailure)\n        return\n    }\n\n    app.logger.Info().Msgf("New book created: %d", book.ID)\n    w.WriteHeader(http.StatusCreated)\n}\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"💭 We will add form validations in the next section.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We save those static error messages inside ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/app.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'const (\n    appErrDataCreationFailure = "data creation failure"\n    appErrFormDecodingFailure = "form decoding failure"\n)\n')),Object(r.b)("h2",{id:"completing-update-book-functionality"},"Completing update book functionality"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To update the database records, we can use ",Object(r.b)("a",o({parentName:"li"},{href:"http://gorm.io/docs/update.html#Update-Changed-Fields"}),"GORM’s ",Object(r.b)("inlineCode",{parentName:"a"},"Update()"))," method. So, let’s add ",Object(r.b)("inlineCode",{parentName:"li"},"UpdateBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"repository/book.go")," to update a book record.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),"func UpdateBook(db *gorm.DB, book *model.Book) error {\n    if err := db.First(&model.Book{}, book.ID).Update(book).Error; err != nil {\n        return err\n    }\n\n    return nil\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Then, let’s complete the ",Object(r.b)("inlineCode",{parentName:"li"},"HandleUpdateBook()")," method in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/bookHandler.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),'func (app *App) HandleUpdateBook(w http.ResponseWriter, r *http.Request) {\n    id, err := strconv.ParseUint(chi.URLParam(r, "id"), 0, 64)\n    if err != nil || id == 0 {\n        app.logger.Info().Msgf("can not parse ID: %v", id)\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        return\n    }\n\n    form := &model.BookForm{}\n    if err := json.NewDecoder(r.Body).Decode(form); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrFormDecodingFailure)\n        return\n    }\n\n    bookModel, err := form.ToModel()\n    if err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrFormDecodingFailure)\n        return\n    }\n\n    bookModel.ID = uint(id)\n    if err := repository.UpdateBook(app.db, bookModel); err != nil {\n        if err == gorm.ErrRecordNotFound {\n            w.WriteHeader(http.StatusNotFound)\n            return\n        }\n\n        app.logger.Warn().Err(err).Msg("")\n\n        w.WriteHeader(http.StatusInternalServerError)\n        fmt.Fprintf(w, `{"error": "%v"}`, appErrDataUpdateFailure)\n        return\n    }\n\n    app.logger.Info().Msgf("Book updated: %d", id)\n    w.WriteHeader(http.StatusAccepted)\n}\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"💭 We will add form validations in the next section.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We save those static error messages in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/app.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-go"}),"const appErrDataUpdateFailure = “data update failure”\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Rebuild and rerun the application. Now, the functionalities of book handlers should be worked, expect form validations which we are going to add in the next section.")))}s.isMDXComponent=!0},70:function(e,n,t){"use strict";t.d(n,"a",function(){return l}),t.d(n,"b",function(){return b});var r=t(0),o=t.n(r),a=o.a.createContext({}),i=function(e){var n=o.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=i(e.components);return o.a.createElement(a.Provider,{value:n},e.children)};var p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},s=function(e){var n=e.components,t=e.mdxType,r=e.originalType,a=e.parentName,l=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=i(n),s=t,b=p[a+"."+s]||p[s]||c[s]||r;return n?o.a.createElement(b,Object.assign({},l,{components:n})):o.a.createElement(b,l)};function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var b=2;b<a;b++)i[b]=t[b];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);