(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return l}),n.d(t,"default",function(){return d});n(0);var a=n(70);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i={id:"a12.adding_validator.v9",title:"Adding Validator.v9"},l=[{value:"Adding initial validator",id:"adding-initial-validator",children:[]},{value:"Implementing custom validation messages",id:"implementing-custom-validation-messages",children:[]},{value:"Implementing custom validation types",id:"implementing-custom-validation-types",children:[{value:"‚≠ê Contribute! ü•§ Buy me a coffee! üöÄ Hire me!",id:"-contribute-ü•§-buy-me-a-coffee--hire-me",children:[]}]}],p={rightToc:l},s="wrapper";function d(e){var t=e.components,n=o(e,["components"]);return Object(a.b)(s,r({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üí≠ Form validation is an important step while inserting and updating data. In the Go ecosystem we can see few validation packages like ",Object(a.b)("a",r({parentName:"p"},{href:"https://gopkg.in/go-playground/validator.v9"}),Object(a.b)("inlineCode",{parentName:"a"},"go-playground/validator.v9")),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/go-ozzo/ozzo-validation"}),Object(a.b)("inlineCode",{parentName:"a"},"go-ozzo/ozzo-validation")),". In here, we are using ",Object(a.b)("a",r({parentName:"p"},{href:"https://gopkg.in/go-playground/validator.v9"}),Object(a.b)("inlineCode",{parentName:"a"},"playground/validator.v9"))," due to its simplicity of usage.")),Object(a.b)("h2",{id:"adding-initial-validator"},"Adding initial validator"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"We need to run ",Object(a.b)("inlineCode",{parentName:"p"},"go get gopkg.in/go-playground/validator.v9")," to download and install the package. As you know, this updates ",Object(a.b)("inlineCode",{parentName:"p"},"go.mod")," and ",Object(a.b)("inlineCode",{parentName:"p"},"go.sum")," files as well.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Let's create ",Object(a.b)("inlineCode",{parentName:"p"},"util/validator/validator.go")," to get the ",Object(a.b)("inlineCode",{parentName:"p"},"*validator.Validate")," with a custom configuration. By default, it uses ",Object(a.b)("inlineCode",{parentName:"p"},"validate")," struct field tags to read meta data. But, in here, we replace it with ",Object(a.b)("inlineCode",{parentName:"p"},"form")," struct field tags."))),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'package validator\n\nimport (\n    "gopkg.in/go-playground/validator.v9"\n)\n\nfunc New() *validator.Validate {\n    validate := validator.New()\n    validate.SetTagName("form")\n\n    return validate\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"To use this ",Object(a.b)("inlineCode",{parentName:"li"},"*validator.Validate")," as the global validator, let‚Äôs add this to ",Object(a.b)("inlineCode",{parentName:"li"},"App struct")," in ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/app.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import "gopkg.in/go-playground/validator.v9"\n\ntype App struct {\n    logger    *logger.Logger\n    db        *gorm.DB\n    validator *validator.Validate\n}\n\nfunc New(\n    logger *logger.Logger,\n    db *gorm.DB,\n    validator *validator.Validate,\n) *App {\n    return &App{\n        logger:    logger,\n        db:        db,\n        validator: validator,\n    }\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, we need to update ",Object(a.b)("inlineCode",{parentName:"li"},"cmd/app/main.go")," to get this ",Object(a.b)("inlineCode",{parentName:"li"},"*validator.Validate")," at the startup of the application.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import vr "myapp/util/validator"\n\nfunc main() {\n  // ...\n\n    validator := vr.New()\n\n    application := app.New(logger, db, validator)\n  \n  // ...\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Let‚Äôs add validation rules to the ",Object(a.b)("inlineCode",{parentName:"li"},"BookForm struct")," in the ",Object(a.b)("inlineCode",{parentName:"li"},"model/book.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'type BookForm struct {\n    Title         string `json:"title" form:"required,max=255"`\n    Author        string `json:"author" form:"required,max=255"`\n    PublishedDate string `json:"published_date" form:"required"`\n    ImageUrl      string `json:"image_url" form:"url"`\n    Description   string `json:"description"`\n}\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üí° You can see all list of validation rule types, supported by ",Object(a.b)("inlineCode",{parentName:"p"},"playground/validator.v9")," in ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/go-playground/validator/blob/v9/baked_in.go#L64"}),"https://github.com/go-playground/validator/blob/v9/baked_in.go#L64"),".")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, let's add validations to the ",Object(a.b)("inlineCode",{parentName:"li"},"HandleCreateBook()")," and ",Object(a.b)("inlineCode",{parentName:"li"},"HandleUpdateBook()")," methods in the ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/book_handler.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'func (app *App) HandleCreateBook(w http.ResponseWriter, r *http.Request) {\n\n  // after create form from decoding request Body\n  \n  if err := app.validator.Struct(form); err != nil {\n    app.logger.Warn().Err(err).Msg("")\n\n    w.WriteHeader(http.StatusUnprocessableEntity)\n    fmt.Fprintf(w, `{"error": "%v"}`, err.Error())\n    return\n  }\n  \n  // ...\n    \n}\n\nfunc (app *App) HandleUpdateBook(w http.ResponseWriter, r *http.Request) {\n    \n  // after create form from decoding request Body\n\n  if err := app.validator.Struct(form); err != nil {\n    app.logger.Warn().Err(err).Msg("")\n\n    w.WriteHeader(http.StatusUnprocessableEntity)\n    fmt.Fprintf(w, `{"error": "%v"}`, err.Error())\n    return\n  }\n    \n  // ...\n    \n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. You should see error messages like following messages, while inserting invalid data.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"{\n  \"error\": \"Key: 'BookForm.Title' Error:Field validation for 'Title' failed on the 'required' tag\"\n}\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üí≠ As you can see, those are not having valid ",Object(a.b)("a",r({parentName:"p"},{href:"https://en.wikipedia.org/wiki/JSON"}),"JSON")," formats. And also messages are not suitable to show to the end user. So, we will add custom messages for these in the next section.")),Object(a.b)("h2",{id:"implementing-custom-validation-messages"},"Implementing custom validation messages"),Object(a.b)("p",null,"We need to fix two things in the default error messages of ",Object(a.b)("a",r({parentName:"p"},{href:"https://gopkg.in/go-playground/validator.v9"}),Object(a.b)("inlineCode",{parentName:"a"},"playground/validator.v9")),"."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"It shows struct field names, instead of names in ",Object(a.b)("inlineCode",{parentName:"li"},"json")," tags; (",Object(a.b)("inlineCode",{parentName:"li"},"\"Field validation for 'Title' failed\"")," instead ",Object(a.b)("inlineCode",{parentName:"li"},"\"Field validation for 'title' failed\""),").")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üîé We can see the solution in ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/go-playground/validator/blob/173026262523a492668bd6d78b8934c2ad69843f/validator_instance.go#L122"}),"https://github.com/go-playground/validator/blob/173026262523a492668bd6d78b8934c2ad69843f/validator_instance.go#L122"),"¬†.")),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"The error response is not having a valid ",Object(a.b)("a",r({parentName:"li"},{href:"https://medium.com/r/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FJSON"}),"JSON")," format and error messages are not suitable to show to the end users.")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üîé The solution ",Object(a.b)("a",r({parentName:"p"},{href:"https://gopkg.in/go-playground/validator.v9"}),Object(a.b)("inlineCode",{parentName:"a"},"playground/validator.v9"))," developers suggest is to use its ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/go-playground/validator/tree/v9/translations"}),Object(a.b)("inlineCode",{parentName:"a"},"go-playground/validator/translations"))," package. But due to we don't need to support multiple translations in our API application, we will write ",Object(a.b)("inlineCode",{parentName:"p"},"ToErrResponse()")," function in ",Object(a.b)("inlineCode",{parentName:"p"},"util/validator/validator.go")," to convert the default error messages to a valid ",Object(a.b)("a",r({parentName:"p"},{href:"https://en.wikipedia.org/wiki/JSON"}),"JSON")," format with end user friendly error messages. However better check their implementation in ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/go-playground/validator/blob/v9/translations/en/en.go"}),"https://github.com/go-playground/validator/blob/v9/translations/en/en.go"),".")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Let‚Äôs update ",Object(a.b)("inlineCode",{parentName:"li"},"util/validator/validator.go")," to fix both above issues.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'package validator\n\nimport (\n    "fmt"\n    "reflect"\n    "strings"\n\n    "gopkg.in/go-playground/validator.v9"\n)\n\ntype ErrResponse struct {\n    Errors []string `json:"errors"`\n}\n\nfunc New() *validator.Validate {\n    validate := validator.New()\n    validate.SetTagName("form")\n\n    // Using the names which have been specified for JSON representations of structs, rather than normal Go field names\n    validate.RegisterTagNameFunc(func(fld reflect.StructField) string {\n        name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]\n        if name == "-" {\n            return ""\n        }\n        return name\n    })\n\n    return validate\n}\n\nfunc ToErrResponse(err error) *ErrResponse {\n    if fieldErrors, ok := err.(validator.ValidationErrors); ok {\n        resp := ErrResponse{\n            Errors: make([]string, len(fieldErrors)),\n        }\n\n        for i, err := range fieldErrors {\n            switch err.Tag() {\n            case "required":\n                resp.Errors[i] = fmt.Sprintf("%s is a required field", err.Field())\n            case "max":\n                resp.Errors[i] = fmt.Sprintf("%s must be a maximum of %s in length", err.Field(), err.Param())\n            case "url":\n                resp.Errors[i] = fmt.Sprintf("%s must be a valid URL", err.Field())\n            default:\n                resp.Errors[i] = fmt.Sprintf("something wrong on %s; %s", err.Field(), err.Tag())\n            }\n        }\n\n        return &resp\n    }\n\n    return nil\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then let‚Äôs update ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/book_handler.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import "myapp/util/validator"\n\nfunc (app *App) HandleCreateBook(w http.ResponseWriter, r *http.Request) {\n\n    // after create form from decoding request Body\n  \n    if err := app.validator.Struct(form); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        resp := validator.ToErrResponse(err)\n        if resp == nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            fmt.Fprintf(w, `{"error": "%v"}`, appErrFormErrResponseFailure)\n            return\n        }\n\n        respBody, err := json.Marshal(resp)\n        if err != nil {\n            app.logger.Warn().Err(err).Msg("")\n\n            w.WriteHeader(http.StatusInternalServerError)\n            fmt.Fprintf(w, `{"error": "%v"}`, appErrJsonCreationFailure)\n            return\n        }\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        w.Write(respBody)\n        return\n    }\n  \n    // ...\n}\n\n\nfunc (app *App) HandleUpdateBook(w http.ResponseWriter, r *http.Request) {\n    \n    // after create form from decoding request Body\n    \n    if err := app.validator.Struct(form); err != nil {\n        app.logger.Warn().Err(err).Msg("")\n\n        resp := validator.ToErrResponse(err)\n        if resp == nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            fmt.Fprintf(w, `{"error": "%v"}`, appErrFormErrResponseFailure)\n            return\n        }\n\n        respBody, err := json.Marshal(resp)\n        if err != nil {\n            app.logger.Warn().Err(err).Msg("")\n\n            w.WriteHeader(http.StatusInternalServerError)\n            fmt.Fprintf(w, `{"error": "%v"}`, appErrJsonCreationFailure)\n            return\n        }\n\n        w.WriteHeader(http.StatusUnprocessableEntity)\n        w.Write(respBody)\n        return\n    }\n    \n    // ...\n}\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"‚≠ê As you can see, we duplicate 20 lines of code in each handler and it is not a good practice. üë®‚Äçüè´ Assume this as ",Object(a.b)("strong",{parentName:"p"},"the homework")," and find how we can remove these duplicates. üîé One way is, moving these codes to a private method in ",Object(a.b)("inlineCode",{parentName:"p"},"app/app/common.go"),".")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"We save those static error messages in ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/app.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'const appErrFormErrResponseFailure = "form error response failure"\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. Now, you should see error messages like these.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'{\n  "errors": [\n    "title is a required field",\n    "author must be a maximum of 255 in length",\n    "image_url must be a valid URL"\n  ]\n}\n')),Object(a.b)("h2",{id:"implementing-custom-validation-types"},"Implementing custom validation types"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"One last thing! We don‚Äôt fully validate the author's name and the published date of the ",Object(a.b)("inlineCode",{parentName:"li"},"BookForm struct"),". For the moment ",Object(a.b)("a",r({parentName:"li"},{href:"https://gopkg.in/go-playground/validator.v9"}),Object(a.b)("inlineCode",{parentName:"a"},"playground/validator.v9"))," is not supporting ",Object(a.b)("em",{parentName:"li"},"‚Äúalphabetic characters with space‚Äù")," and ",Object(a.b)("em",{parentName:"li"},"‚Äúdate‚Äù")," validations. So, let‚Äôs create a custom validation types for these in ",Object(a.b)("inlineCode",{parentName:"li"},"util/validator/validator.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import "regexp"\n\nconst (\n    alphaSpaceRegexString string = "^[a-zA-Z ]+$"\n    dateRegexString       string = "^(((19|20)([2468][048]|[13579][26]|0[48])|2000)[/-]02[/-]29|((19|20)[0-9]{2}[/-](0[469]|11)[/-](0[1-9]|[12][0-9]|30)|(19|20)[0-9]{2}[/-](0[13578]|1[02])[/-](0[1-9]|[12][0-9]|3[01])|(19|20)[0-9]{2}[/-]02[/-](0[1-9]|1[0-9]|2[0-8])))$"\n)\n\nfunc New() *validator.Validate {\n  // ...\n  \n  validate.RegisterValidation("alpha_space", isAlphaSpace)\n  validate.RegisterValidation("date", isDate)\n\n  return validate\n}\n\nfunc isAlphaSpace(fl validator.FieldLevel) bool {\n    reg := regexp.MustCompile(alphaSpaceRegexString)\n    return reg.MatchString(fl.Field().String())\n}\n\nfunc isDate(fl validator.FieldLevel) bool {\n    reg := regexp.MustCompile(dateRegexString)\n    return reg.MatchString(fl.Field().String())\n}\n\nfunc ToErrResponse(err error) *ErrResponse {\n  // ...\n\n    for i, err := range fieldErrors {\n        switch err.Tag() {\n        // ...\n        case "alpha_space":\n            resp.Errors[i] = fmt.Sprintf("%s can only contain alphabetic and space characters", err.Field())\n        case "date":\n            resp.Errors[i] = fmt.Sprintf("%s must be a valid date", err.Field())\n        // ...\n        }\n    }\n    \n  //... \n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, we need to update ",Object(a.b)("inlineCode",{parentName:"li"},"BookForm struct")," in ",Object(a.b)("inlineCode",{parentName:"li"},"model/book.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'type BookForm struct {\n    // ...\n    Author        string `json:"author" form:"required,alpha_space,max=255"`\n    PublishedDate string `json:"published_date" form:"required,date"`\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. Now, you should get validation errors even for ",Object(a.b)("inlineCode",{parentName:"li"},"author")," and ",Object(a.b)("inlineCode",{parentName:"li"},"image_url"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'{\n  "errors": [\n    "title is a required field",\n    "author can only contain alphabetic and space characters",\n    "published_date must be a valid date",\n    "image_url must be a valid URL"\n  ]\n}\n')),Object(a.b)("hr",null),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"This is the very beginning of this project. So, as the first step, we discussed about ‚ÄúHow to build a Dockerized RESTful API application using Go‚Äù. In the future discussions, we will discuss about Kubernetes and how to deploy our application in a cloud environment.")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"üá±üá∞ Also, I am not a native English speaker. So, if you found any mistake or something I need to be changed, even a spelling or a grammar mistake, please let me know. Thanks for reading, hope it helped for you.")),Object(a.b)("h3",{id:"-contribute-ü•§-buy-me-a-coffee--hire-me"},"‚≠ê ",Object(a.b)("a",r({parentName:"h3"},{href:"https://github.com/learning-cloud-native-go/website"}),"Contribute!")," ü•§ ",Object(a.b)("a",r({parentName:"h3"},{href:"https://www.buymeacoffee.com/dumindu"}),"Buy me a coffee!")," üöÄ ",Object(a.b)("a",r({parentName:"h3"},{href:"https://github.com/dumindu/hire-me/"}),"Hire me!")))}d.isMDXComponent=!0},70:function(e,t,n){"use strict";n.d(t,"a",function(){return l}),n.d(t,"b",function(){return c});var a=n(0),r=n.n(a),o=r.a.createContext({}),i=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=i(e.components);return r.a.createElement(o.Provider,{value:t},e.children)};var p="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=function(e){var t=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,l=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),p=i(t),d=n,c=p[o+"."+d]||p[d]||s[d]||a;return t?r.a.createElement(c,Object.assign({},l,{components:t})):r.a.createElement(c,l)};function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);