(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{52:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return l}),t.d(n,"default",function(){return b});t(0);var a=t(68);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i={id:"a4.adding_initial_configurations",title:"Adding initial configurations"},l=[{value:"Using environment variables for configurations",id:"using-environment-variables-for-configurations",children:[]},{value:"Populating data from environment variables",id:"populating-data-from-environment-variables",children:[]}],c={rightToc:l},p="wrapper";function b(e){var n=e.components,t=o(e,["components"]);return Object(a.b)(p,r({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"If you remember the ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/a2.adding_initial_http_server"}),"code of initial HTTP server"),", we have hard-coded the server port and timeout values with the code. Things like them should be configurable. So better extract them to a ",Object(a.b)("inlineCode",{parentName:"p"},"config")," package and use those config parameters in the code."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’­ To store configurations, we can use many formats like ",Object(a.b)("inlineCode",{parentName:"p"},".xml"),", ",Object(a.b)("inlineCode",{parentName:"p"},".json"),", ",Object(a.b)("inlineCode",{parentName:"p"},".env"),", ",Object(a.b)("inlineCode",{parentName:"p"},".yaml"),", ",Object(a.b)("inlineCode",{parentName:"p"},".toml")," files or systems like ",Object(a.b)("a",r({parentName:"p"},{href:"https://etcd.io/"}),Object(a.b)("inlineCode",{parentName:"a"},"etcd")),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"}),"AWS Parameter Store"),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://cloud.google.com/deployment-manager/runtime-configurator/"}),"GCP Runtime Configurator"),". I choseÂ ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},".env")," files")," to store configurations in here due to the simplicity of use.")),Object(a.b)("h2",{id:"using-environment-variables-for-configurations"},"Using environment variables for configurations"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Because of these configs should be loaded with Docker application start, we store them under ",Object(a.b)("inlineCode",{parentName:"li"},"docker/app/.env"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"SERVER_PORT=8080\nSERVER_TIMEOUT_READ=5s\nSERVER_TIMEOUT_WRITE=10s\nSERVER_TIMEOUT_IDLE=15s\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"We can use ",Object(a.b)("a",r({parentName:"li"},{href:"https://docs.docker.com/compose/environment-variables/#the-env_file-configuration-option"}),Object(a.b)("inlineCode",{parentName:"a"},"env_file")," configuration option")," on ",Object(a.b)("inlineCode",{parentName:"li"},"docker-compose.yml")," to set environment variables via an ",Object(a.b)("inlineCode",{parentName:"li"},".env")," file on application start; (Line 5-6).")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yml"}),'app:\n  build:\n    context: .\n    dockerfile: ./docker/app/Dockerfile\n  env_file:\n    - ./docker/app/.env\n  ports:\n    - "8080:8080"\n')),Object(a.b)("h2",{id:"populating-data-from-environment-variables"},"Populating data from environment variables"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’­ Go standard library provides ",Object(a.b)("a",r({parentName:"p"},{href:"https://golang.org/pkg/os/#Getenv"}),Object(a.b)("inlineCode",{parentName:"a"},"os.Getenv()"))," function to read each environment variable separately. But there are Go libraries like ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/spf13/viper"}),Object(a.b)("inlineCode",{parentName:"a"},"spf13/viper")),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/kelseyhightower/envconfig"}),Object(a.b)("inlineCode",{parentName:"a"},"kelseyhightower/envconfig")),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/caarlos0/env"}),Object(a.b)("inlineCode",{parentName:"a"},"caarlos0/env")),", ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/joeshaw/envdecode"}),Object(a.b)("inlineCode",{parentName:"a"},"joeshaw/envdecode"))," to get data on multiple environment variables as a set, by populating a struct from environment variables. I chose ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("a",r({parentName:"strong"},{href:"https://github.com/joeshaw/envdecode"}),Object(a.b)("inlineCode",{parentName:"a"},"joeshaw/envdecode")))," to use in here, due to its simplicity.")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"We need to run ",Object(a.b)("inlineCode",{parentName:"li"},"go get github.com/joeshaw/envdecode")," to download and install the package. This will update ",Object(a.b)("inlineCode",{parentName:"li"},"go.mod")," and ",Object(a.b)("inlineCode",{parentName:"li"},"go.sum")," files as well."),Object(a.b)("li",{parentName:"ul"},"We can cache go modules by copying ",Object(a.b)("inlineCode",{parentName:"li"},"go.mod")," and ",Object(a.b)("inlineCode",{parentName:"li"},"go.sum")," files to Docker first and by running ",Object(a.b)("inlineCode",{parentName:"li"},"go mod download")," before copying all other files to Docker. So, let's update ",Object(a.b)("inlineCode",{parentName:"li"},"docker/app/Dockerfile")," for this; (Line 6-8).")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-dockerfile"}),"FROM golang:1.13-alpine as build-env\nWORKDIR /myapp\n\nRUN apk update && apk add --no-cache gcc musl-dev git\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\n\nRUN go build -ldflags '-w -s' -a -o ./bin/app ./cmd/app\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Letâ€™s create a ",Object(a.b)("inlineCode",{parentName:"li"},"config")," package to get all configuration values once by adding ",Object(a.b)("inlineCode",{parentName:"li"},"Conf")," struct to map each configuration and ",Object(a.b)("inlineCode",{parentName:"li"},"AppConfig()")," function to get the populated struct. I save this code under ",Object(a.b)("inlineCode",{parentName:"li"},"config/config.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'package config\n\nimport (\n    "log"\n    "time"\n\n    "github.com/joeshaw/envdecode"\n)\n\ntype Conf struct {\n    Server serverConf\n}\n\ntype serverConf struct {\n    Port         int           `env:"SERVER_PORT,required"`\n    TimeoutRead  time.Duration `env:"SERVER_TIMEOUT_READ,required"`\n    TimeoutWrite time.Duration `env:"SERVER_TIMEOUT_WRITE,required"`\n    TimeoutIdle  time.Duration `env:"SERVER_TIMEOUT_IDLE,required"`\n}\n\nfunc AppConfig() *Conf {\n    var c Conf\n    if err := envdecode.StrictDecode(&c); err != nil {\n        log.Fatalf("Failed to decode: %s", err)\n    }\n\n    return &c\n}\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’¡ In here, we have created ",Object(a.b)("inlineCode",{parentName:"p"},"Conf")," struct with embedded struct ",Object(a.b)("inlineCode",{parentName:"p"},"serverConf")," to get initial server configs. So, when we need to add new configurations for DB in future, we can easily add another embedded struct for them to maintain simplicity and readability of the code.")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, let's update ",Object(a.b)("inlineCode",{parentName:"li"},"cmd/app/main.go")," to get configuration values via ",Object(a.b)("inlineCode",{parentName:"li"},"AppConfig()")," function; (Line 6,10,15 and 22â€“24).")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import (\n    "fmt"\n    "log"\n    "net/http"\n\n    "myapp/config"\n)\n\nfunc main() {\n    appConf := config.AppConfig()\n\n    mux := http.NewServeMux()\n    mux.HandleFunc("/", Greet)\n\n    address := fmt.Sprintf(":%d", appConf.Server.Port)\n\n    log.Printf("Starting server %s\\n", address)\n\n    s := &http.Server{\n        Addr:         address,\n        Handler:      mux,\n        ReadTimeout:  appConf.Server.TimeoutRead,\n        WriteTimeout: appConf.Server.TimeoutWrite,\n        IdleTimeout:  appConf.Server.TimeoutIdle,\n    }\n\n    if err := s.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n        log.Fatal("Server startup failed")\n    }\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. You should see the same ",Object(a.b)("inlineCode",{parentName:"li"},"Hello World!")," response on ",Object(a.b)("inlineCode",{parentName:"li"},"localhost:8080"),".")))}b.isMDXComponent=!0},68:function(e,n,t){"use strict";t.d(n,"a",function(){return l}),t.d(n,"b",function(){return d});var a=t(0),r=t.n(a),o=r.a.createContext({}),i=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=i(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=function(e){var n=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,l=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),c=i(n),b=t,d=c[o+"."+b]||c[b]||p[b]||a;return n?r.a.createElement(d,Object.assign({},l,{components:n})):r.a.createElement(d,l)};function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);