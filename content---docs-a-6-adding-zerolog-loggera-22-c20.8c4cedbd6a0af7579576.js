(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{60:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return l}),t.d(n,"default",function(){return s});t(0);var r=t(70);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i={id:"a6.adding_zerolog_logger",title:"Adding Zerolog logger"},l=[{value:"Adding Zerolog as the Syslog¬†logger",id:"adding-zerolog-as-the-syslog-logger",children:[]},{value:"Implementing a request logger",id:"implementing-a-request-logger",children:[]},{value:"Creating the main app package",id:"creating-the-main-app-package",children:[]}],p={rightToc:l},c="wrapper";function s(e){var n=e.components,t=o(e,["components"]);return Object(r.b)(c,a({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"‚≠ê While using microservices architectures, multiple services might be invoked to handle a single client request. The ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",a({parentName:"strong"},{href:"https://en.wikipedia.org/wiki/Syslog"}),Object(r.b)("inlineCode",{parentName:"a"},"Syslog")))," is a ",Object(r.b)("a",a({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Log_file"}),"message logging protocol")," which can be used to send all log events in different systems to a centralized log storage like ",Object(r.b)("a",a({parentName:"p"},{href:"https://www.graylog.org/"}),Object(r.b)("inlineCode",{parentName:"a"},"Graylog")),", ",Object(r.b)("a",a({parentName:"p"},{href:"https://cloud.google.com/logging/"}),Object(r.b)("inlineCode",{parentName:"a"},"Stackdriver")),", ",Object(r.b)("a",a({parentName:"p"},{href:"https://www.elastic.co/what-is/elk-stack"}),Object(r.b)("inlineCode",{parentName:"a"},"ELK Stack")),", to provide visibility into the behavior of microservices. There are many powerful logging libraries which support ",Object(r.b)("a",a({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Syslog"}),"Syslog")," standards in Go like ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/uber-go/zap"}),Object(r.b)("inlineCode",{parentName:"a"},"uber-go/zap")),", ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/apex/log"}),Object(r.b)("inlineCode",{parentName:"a"},"apex/log")),", ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/Sirupsen/logrus"}),Object(r.b)("inlineCode",{parentName:"a"},"sirupsen/logrus")),", ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/rs/zerolog"}),Object(r.b)("inlineCode",{parentName:"a"},"rs/zerolog")),". In here, we are using ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",a({parentName:"strong"},{href:"https://github.com/rs/zerolog"}),Object(r.b)("inlineCode",{parentName:"a"},"rs/zerolog")))," due to its speed and lesser allocations.")),Object(r.b)("h2",{id:"adding-zerolog-as-the-syslog-logger"},"Adding Zerolog as the Syslog¬†logger"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"We need to run ",Object(r.b)("inlineCode",{parentName:"p"},"go get github.com/rs/zerolog")," to download and install the package. As you know, this updates ",Object(r.b)("inlineCode",{parentName:"p"},"go.mod")," and ",Object(r.b)("inlineCode",{parentName:"p"},"go.sum")," files as well.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Let's create a global logger under ",Object(r.b)("inlineCode",{parentName:"p"},"util/logger/logger.go")," by wrapping ",Object(r.b)("inlineCode",{parentName:"p"},"zerolog.Logger"),". We can find an example under ",Object(r.b)("inlineCode",{parentName:"p"},"rs/zerolog/log")," package."))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package logger\n\nimport (\n    "context"\n    "io"\n    "os"\n\n    "github.com/rs/zerolog"\n)\n\ntype Logger struct {\n    logger *zerolog.Logger\n}\n\nfunc New(isDebug bool) *Logger {\n    logLevel := zerolog.InfoLevel\n    if isDebug {\n        logLevel = zerolog.DebugLevel\n    }\n\n    zerolog.SetGlobalLevel(logLevel)\n    logger := zerolog.New(os.Stderr).With().Timestamp().Logger()\n\n    return &Logger{logger: &logger}\n}\n\nfunc NewConsole(isDebug bool) *Logger {\n    logLevel := zerolog.InfoLevel\n    if isDebug {\n        logLevel = zerolog.DebugLevel\n    }\n\n    zerolog.SetGlobalLevel(logLevel)\n    logger := zerolog.New(os.Stdout).With().Timestamp().Logger()\n\n    return &Logger{logger: &logger}\n}\n\n// Output duplicates the global logger and sets w as its output.\nfunc (l *Logger) Output(w io.Writer) zerolog.Logger {\n    return l.logger.Output(w)\n}\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"üí° Above code block shows how to convert the code in ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/rs/zerolog/blob/master/log/log.go"}),Object(r.b)("inlineCode",{parentName:"a"},"rs/zerolog/log"))," to ",Object(r.b)("inlineCode",{parentName:"p"},"util/logger/logger.go"),". Due to we need to prevent using lengthy code blocks in this article, I have added only one method/ ",Object(r.b)("inlineCode",{parentName:"p"},"Output()")," in the above code. ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/learning-cloud-native-go/myapp/tree/step-6/util/logger"}),"The complete code")," can be found on ",Object(r.b)("inlineCode",{parentName:"p"},"util/logger")," package with tests.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"In the previous step, we used ",Object(r.b)("inlineCode",{parentName:"p"},"isDebug")," boolean parameter to choose the log level. We set the log level as ",Object(r.b)("inlineCode",{parentName:"p"},"Debug"),", only if that value is true. Otherwise, we set it as ",Object(r.b)("inlineCode",{parentName:"p"},"Info"),". Let's add this to our configurations by adding ",Object(r.b)("inlineCode",{parentName:"p"},"DEBUG=true")," to ",Object(r.b)("inlineCode",{parentName:"p"},"docker/app/.env")," and by adding ",Object(r.b)("inlineCode",{parentName:"p"},'Debug bool Àãenv:"DEBUG,required"Àã')," to ",Object(r.b)("inlineCode",{parentName:"p"},"config/config.go")," ",Object(r.b)("inlineCode",{parentName:"p"},"Conf")," struct. Check the ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/learning-cloud-native-go/myapp/tree/step-6"}),Object(r.b)("inlineCode",{parentName:"a"},"step-6")," branch")," for the complete code.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Let's update ",Object(r.b)("inlineCode",{parentName:"p"},"cmd/app/main.go")," to use new ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/learning-cloud-native-go/myapp/tree/step-6/util/logger"}),Object(r.b)("inlineCode",{parentName:"a"},"util/logger"))," instead the default ",Object(r.b)("a",a({parentName:"p"},{href:"https://golang.org/pkg/log/"}),Object(r.b)("inlineCode",{parentName:"a"},"log"))," package."))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'import (\n    "fmt"\n    "net/http"\n\n    "myapp/app/router"\n    "myapp/config"\n    lr "myapp/util/logger"\n)\n\nfunc main() {\n    appConf := config.AppConfig()\n\n    logger := lr.New(appConf.Debug)\n\n    appRouter := router.New()\n\n    address := fmt.Sprintf(":%d", appConf.Server.Port)\n\n    logger.Info().Msgf("Starting server %v", address)\n\n    s := &http.Server{\n        Addr:         address,\n        Handler:      appRouter,\n        ReadTimeout:  appConf.Server.TimeoutRead,\n        WriteTimeout: appConf.Server.TimeoutWrite,\n        IdleTimeout:  appConf.Server.TimeoutIdle,\n    }\n\n    if err := s.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n        logger.Fatal().Err(err).Msg("Server startup failed")\n    }\n}\n')),Object(r.b)("h2",{id:"implementing-a-request-logger"},"Implementing a request logger"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"üí≠ Besides the main application events, it's helpful having logs of each request and response details. For that we can create a custom ",Object(r.b)("a",a({parentName:"p"},{href:"https://golang.org/pkg/net/http/#Handler"}),Object(r.b)("inlineCode",{parentName:"a"},"Handler"))," which maps ",Object(r.b)("inlineCode",{parentName:"p"},"ServeHTTP(ResponseWriter, *Request)")," signature and an embedded ",Object(r.b)("inlineCode",{parentName:"p"},"util/logger")," to log request and response details."),Object(r.b)("p",{parentName:"blockquote"},"üîé A good example can be found in ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/google/go-cloud/blob/master/server/requestlog/requestlog.go"}),Object(r.b)("inlineCode",{parentName:"a"},"google/go-cloud/server/requestlog")),".")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Let's create the new custom ",Object(r.b)("a",a({parentName:"li"},{href:"https://golang.org/pkg/net/http/#Handler"}),Object(r.b)("inlineCode",{parentName:"a"},"Handler"))," under ",Object(r.b)("inlineCode",{parentName:"li"},"app/requestlog/handler.go"),". Later, we will use the ",Object(r.b)("inlineCode",{parentName:"li"},"NewHandler()")," function to convert normal handlers to this custom handlers.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package requestlog\n\nimport (\n    "io"\n    "io/ioutil"\n    "net"\n    "net/http"\n    "time"\n\n    "myapp/util/logger"\n)\n\ntype Handler struct {\n    handler http.Handler\n    logger  *logger.Logger\n}\n\nfunc NewHandler(h http.HandlerFunc, l *logger.Logger) *Handler {\n    return &Handler{\n        handler: h,\n        logger:  l,\n    }\n}\n\nfunc (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    start := time.Now()\n\n    le := &logEntry{\n        ReceivedTime:      start,\n        RequestMethod:     r.Method,\n        RequestURL:        r.URL.String(),\n        RequestHeaderSize: headerSize(r.Header),\n        UserAgent:         r.UserAgent(),\n        Referer:           r.Referer(),\n        Proto:             r.Proto,\n        RemoteIP:          ipFromHostPort(r.RemoteAddr),\n    }\n\n    if addr, ok := r.Context().Value(http.LocalAddrContextKey).(net.Addr); ok {\n        le.ServerIP = ipFromHostPort(addr.String())\n    }\n    r2 := new(http.Request)\n    *r2 = *r\n    rcc := &readCounterCloser{r: r.Body}\n    r2.Body = rcc\n    w2 := &responseStats{w: w}\n\n    h.handler.ServeHTTP(w2, r2)\n\n    le.Latency = time.Since(start)\n    if rcc.err == nil && rcc.r != nil {\n        // If the handler hasn\'t encountered an error in the Body (like EOF),\n        // then consume the rest of the Body to provide an accurate rcc.n.\n        io.Copy(ioutil.Discard, rcc)\n    }\n    le.RequestBodySize = rcc.n\n    le.Status = w2.code\n    if le.Status == 0 {\n        le.Status = http.StatusOK\n    }\n    le.ResponseHeaderSize, le.ResponseBodySize = w2.size()\n    h.logger.Info().\n        Time("received_time", le.ReceivedTime).\n        Str("method", le.RequestMethod).\n        Str("url", le.RequestURL).\n        Int64("header_size", le.RequestHeaderSize).\n        Int64("body_size", le.RequestBodySize).\n        Str("agent", le.UserAgent).\n        Str("referer", le.Referer).\n        Str("proto", le.Proto).\n        Str("remote_ip", le.RemoteIP).\n        Str("server_ip", le.ServerIP).\n        Int("status", le.Status).\n        Int64("resp_header_size", le.ResponseHeaderSize).\n        Int64("resp_body_size", le.ResponseBodySize).\n        Dur("latency", le.Latency).\n        Msg("")\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To keep the code cleaner, the code related with log entry is moved to ",Object(r.b)("inlineCode",{parentName:"li"},"app/requestlog/log_entry.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package requestlog\n\nimport (\n    "errors"\n    "io"\n    "net"\n    "net/http"\n    "time"\n)\n\ntype logEntry struct {\n    ReceivedTime      time.Time\n    RequestMethod     string\n    RequestURL        string\n    RequestHeaderSize int64\n    RequestBodySize   int64\n    UserAgent         string\n    Referer           string\n    Proto             string\n\n    RemoteIP string\n    ServerIP string\n\n    Status             int\n    ResponseHeaderSize int64\n    ResponseBodySize   int64\n    Latency            time.Duration\n}\n\nfunc ipFromHostPort(hp string) string {\n    h, _, err := net.SplitHostPort(hp)\n    if err != nil {\n        return ""\n    }\n    if len(h) > 0 && h[0] == \'[\' {\n        return h[1 : len(h)-1]\n    }\n    return h\n}\n\ntype readCounterCloser struct {\n    r   io.ReadCloser\n    n   int64\n    err error\n}\n\nfunc (rcc *readCounterCloser) Read(p []byte) (n int, err error) {\n    if rcc.err != nil {\n        return 0, rcc.err\n    }\n    n, rcc.err = rcc.r.Read(p)\n    rcc.n += int64(n)\n    return n, rcc.err\n}\n\nfunc (rcc *readCounterCloser) Close() error {\n    rcc.err = errors.New("read from closed reader")\n    return rcc.r.Close()\n}\n\ntype writeCounter int64\n\nfunc (wc *writeCounter) Write(p []byte) (n int, err error) {\n    *wc += writeCounter(len(p))\n    return len(p), nil\n}\n\nfunc headerSize(h http.Header) int64 {\n    var wc writeCounter\n    h.Write(&wc)\n    return int64(wc) + 2 // for CRLF\n}\n\ntype responseStats struct {\n    w     http.ResponseWriter\n    hsize int64\n    wc    writeCounter\n    code  int\n}\n\nfunc (r *responseStats) Header() http.Header {\n    return r.w.Header()\n}\n\nfunc (r *responseStats) WriteHeader(statusCode int) {\n    if r.code != 0 {\n        return\n    }\n    r.hsize = headerSize(r.w.Header())\n    r.w.WriteHeader(statusCode)\n    r.code = statusCode\n}\n\nfunc (r *responseStats) Write(p []byte) (n int, err error) {\n    if r.code == 0 {\n        r.WriteHeader(http.StatusOK)\n    }\n    n, err = r.w.Write(p)\n    r.wc.Write(p[:n])\n    return\n}\n\nfunc (r *responseStats) size() (hdr, body int64) {\n    if r.code == 0 {\n        return headerSize(r.w.Header()), 0\n    }\n    // Use the header size from the time WriteHeader was called.\n    // The Header map can be mutated after the call to add HTTP Trailers,\n    // which we don\'t want to count.\n    return r.hsize, int64(r.wc)\n}\n')),Object(r.b)("h2",{id:"creating-the-main-app-package"},"Creating the main app package"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"üí≠ In the previous steps, we just created a global ",Object(r.b)("inlineCode",{parentName:"p"},"Syslog")," logger and a custom ",Object(r.b)("a",a({parentName:"p"},{href:"https://golang.org/pkg/net/http/#Handler"}),Object(r.b)("inlineCode",{parentName:"a"},"Handler"))," which logs each request and response details. We need to integrate both of them with our application handles like ",Object(r.b)("inlineCode",{parentName:"p"},"app/app/index_handler.go"),".")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"One way to set the logger as a dependency for our server application is, creating a struct with embedded ",Object(r.b)("a",a({parentName:"li"},{href:"https://github.com/rs/zerolog"}),Object(r.b)("inlineCode",{parentName:"a"},"rs/zerolog"))," logger, to represent our server application and then attach our application handles to that struct. For that, let's create the ",Object(r.b)("inlineCode",{parentName:"li"},"App struct")," under ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/app.go"),". If you don't like the naming ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/app.go"),"¬†, I recommend you to name this as ",Object(r.b)("inlineCode",{parentName:"li"},"app/server/server.go")," with ",Object(r.b)("inlineCode",{parentName:"li"},"Server struct")," or ",Object(r.b)("inlineCode",{parentName:"li"},"server/app/app.go")," with ",Object(r.b)("inlineCode",{parentName:"li"},"App struct"),".")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'package app\n\nimport (\n    "myapp/util/logger"\n)\n\ntype App struct {\n    logger *logger.Logger\n}\n\nfunc New(logger *logger.Logger) *App {\n    return &App{logger: logger}\n}\n\nfunc (app *App) Logger() *logger.Logger {\n    return app.logger\n}\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"‚≠ê However, this is not the most efficient way of packaging Go applications. But to make the project more accessible for different levels of programmers, especially for the newcomers to Go web API development, we assume all API always depends on the same set of dependencies."),Object(r.b)("p",{parentName:"blockquote"},"üí° With this structure, we can easily load application dependencies inside handlers. For the moment it's only about a ",Object(r.b)("a",a({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Syslog"}),Object(r.b)("inlineCode",{parentName:"a"},"Syslog"))," logger. Same way, we can add the DB connections, ",Object(r.b)("a",a({parentName:"p"},{href:"https://redis.io/"}),"Redis")," connections, messaging systems like ",Object(r.b)("a",a({parentName:"p"},{href:"https://nats.io/"}),"NATS")," and etc.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Then, let‚Äôs convert the ",Object(r.b)("inlineCode",{parentName:"li"},"HandleIndex()")," function in ",Object(r.b)("inlineCode",{parentName:"li"},"app/app/index_handler.go")," to a method of above ",Object(r.b)("inlineCode",{parentName:"li"},"App struct"),".")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"func (app *App) HandleIndex(w http.ResponseWriter, _ *http.Request) {")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Now, let's update ",Object(r.b)("inlineCode",{parentName:"li"},"app/router/router.go")," to use ",Object(r.b)("inlineCode",{parentName:"li"},"NewHandler()")," function in ",Object(r.b)("inlineCode",{parentName:"li"},"app/requestlog")," to convert the normal handlers into the custom handlers which logs request and response details.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'import (\n    "github.com/go-chi/chi"\n\n    "myapp/app/app"\n    "myapp/app/requestlog"\n)\n\nfunc New(a *app.App) *chi.Mux {\n    l := a.Logger()\n\n    r := chi.NewRouter()\n    r.Method("GET", "/", requestlog.NewHandler(a.HandleIndex, l))\n\n    return r\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Due to we are passing ",Object(r.b)("inlineCode",{parentName:"li"},"*App")," to the ",Object(r.b)("inlineCode",{parentName:"li"},"New()")," function in ",Object(r.b)("inlineCode",{parentName:"li"},"app/router"),", we have to update ",Object(r.b)("inlineCode",{parentName:"li"},"cmd/app/main.go"),".")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-go"}),'import (\n    "fmt"\n    "net/http"\n\n    "myapp/app/app"\n    "myapp/app/router"\n    "myapp/config"\n    lr "myapp/util/logger"\n)\n\nfunc main() {\n    appConf := config.AppConfig()\n\n    logger := lr.New(appConf.Debug)\n\n    application := app.New(logger)\n\n    appRouter := router.New(application)\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Rebuild and rerun the application. You should see the same ",Object(r.b)("inlineCode",{parentName:"li"},"Hello World!")," response on ",Object(r.b)("inlineCode",{parentName:"li"},"localhost:8080"),", as well as logs like this.")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-json"}),'{"level":"info","received_time":"2019-08-05T13:37:29Z","method":"GET","url":"/","header_size":322,"body_size":0,"agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0","referer":"","proto":"HTTP/1.1","remote_ip":"172.18.0.1","server_ip":"172.18.0.2","status":200,"resp_header_size":96,"resp_body_size":12,"latency":0.068137,"time":"2019-09-02T13:37:29Z"}\n')))}s.isMDXComponent=!0},70:function(e,n,t){"use strict";t.d(n,"a",function(){return l}),t.d(n,"b",function(){return g});var r=t(0),a=t.n(r),o=a.a.createContext({}),i=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=i(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},s=function(e){var n=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,l=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=i(n),s=t,g=p[o+"."+s]||p[s]||c[s]||r;return n?a.a.createElement(g,Object.assign({},l,{components:n})):a.a.createElement(g,l)};function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var g=2;g<o;g++)i[g]=t[g];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);