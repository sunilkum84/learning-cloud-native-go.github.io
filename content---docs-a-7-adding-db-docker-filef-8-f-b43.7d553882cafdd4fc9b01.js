(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{50:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return c}),t.d(n,"rightToc",function(){return p}),t.d(n,"default",function(){return b});t(0);var a=t(70);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c={id:"a7.adding_db_docker_file",title:"Adding DB docker file"},p=[],i={rightToc:p},l="wrapper";function b(e){var n=e.components,t=o(e,["components"]);return Object(a.b)(l,r({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"As I informed earlier, we use the ",Object(a.b)("inlineCode",{parentName:"li"},"docker")," folder in the project root to store all Docker related files. So, Letâ€™s save this under ",Object(a.b)("inlineCode",{parentName:"li"},"docker/mariadb/Dockerfile"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-dockerfile"}),"FROM yobasystems/alpine-mariadb:latest\n\nRUN apk update && apk add --no-cache bash\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’¡In here, I am just using a ",Object(a.b)("inlineCode",{parentName:"p"},"mariadb")," alpine image with ",Object(a.b)("inlineCode",{parentName:"p"},"bash"),". If you donâ€™t like to add an extra weight to your images by installing ",Object(a.b)("inlineCode",{parentName:"p"},"bash"),", just use builtin ",Object(a.b)("inlineCode",{parentName:"p"},"sh")," or ",Object(a.b)("inlineCode",{parentName:"p"},"ash")," shells and directly add ",Object(a.b)("inlineCode",{parentName:"p"},'image: "yobasystems/alpine-mariadb:latest"')," to ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," without using build: in the next step.")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, letâ€™s update docker-compose.yml;(From line 9)")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yml"}),'app:\n  build:\n    context: .\n    dockerfile: ./docker/app/Dockerfile\n  env_file:\n    - ./docker/app/.env\n  ports:\n    - "8080:8080"\n  depends_on:\n    - db\n\ndb:\n  build: ./docker/mariadb/\n  environment:\n    MYSQL_ROOT_PASSWORD: myapp_root_pass\n    MYSQL_DATABASE: myapp_db\n    MYSQL_USER: myapp_user\n    MYSQL_PASSWORD: myapp_pass\n  ports:\n    - 3306:3306\n  restart: always\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. Now you should see two containers are running while you run ",Object(a.b)("a",r({parentName:"li"},{href:"https://docs.docker.com/compose/reference/ps/"}),Object(a.b)("inlineCode",{parentName:"a"},"docker-compose ps"))," (or ",Object(a.b)("a",r({parentName:"li"},{href:"https://docs.docker.com/engine/reference/commandline/ps/"}),Object(a.b)("inlineCode",{parentName:"a"},"docker ps")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"   Name           Command       State           Ports         \n--------------------------------------------------------------\nmyapp_app_1   /myapp/app        Up      0.0.0.0:8080->8080/tcp\nmyapp_db_1    /scripts/run.sh   Up      0.0.0.0:3306->3306/tcp\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’¡ Also you can use any ",Object(a.b)("inlineCode",{parentName:"p"},"mariadb")," client to connect to the (empty) database.")),Object(a.b)("p",null,Object(a.b)("img",r({parentName:"p"},{src:"assets/a7.check_db_connection.png",alt:"Check database connection"}))))}b.isMDXComponent=!0},70:function(e,n,t){"use strict";t.d(n,"a",function(){return p}),t.d(n,"b",function(){return s});var a=t(0),r=t.n(a),o=r.a.createContext({}),c=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},p=function(e){var n=c(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var i="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=function(e){var n=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,p=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),i=c(n),b=t,s=i[o+"."+b]||i[b]||l[b]||a;return n?r.a.createElement(s,Object.assign({},p,{components:n})):r.a.createElement(s,p)};function s(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=b;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[i]="string"==typeof e?e:a,c[1]=p;for(var s=2;s<o;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);