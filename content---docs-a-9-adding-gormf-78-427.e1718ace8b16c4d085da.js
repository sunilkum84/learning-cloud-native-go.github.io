(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{56:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return p}),t.d(n,"default",function(){return s});t(0);var a=t(70);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i={id:"a9.adding_gorm",title:"Adding GORM"},p=[{value:"Implementing a GORM adapter",id:"implementing-a-gorm-adapter",children:[]},{value:"Adding GORM adapter to the main app",id:"adding-gorm-adapter-to-the-main-app",children:[]},{value:"Checking application health",id:"checking-application-health",children:[]}],l={rightToc:p},c="wrapper";function s(e){var n=e.components,t=o(e,["components"]);return Object(a.b)(c,r({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"ðŸ’­ ",Object(a.b)("a",r({parentName:"p"},{href:"http://gorm.io/"}),"GORM")," is a full featured ",Object(a.b)("a",r({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Object-relational_mapping"}),"ORM")," for Golang. It supports database associations, preloading associated models, database transactions and many more. If you are not familiar with GORM, I highly recommend you to check ",Object(a.b)("a",r({parentName:"p"},{href:"http://gorm.io/docs/"}),"its documentation")," before starting this section.")),Object(a.b)("h2",{id:"implementing-a-gorm-adapter"},"Implementing a GORM adapter"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"We need to run ",Object(a.b)("inlineCode",{parentName:"p"},"go get github.com/jinzhu/gorm")," to download and install the package. As you know, this updates ",Object(a.b)("inlineCode",{parentName:"p"},"go.mod")," and ",Object(a.b)("inlineCode",{parentName:"p"},"go.sum")," files as well.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Even though ",Object(a.b)("a",r({parentName:"p"},{href:"http://gorm.io/docs/connecting_to_the_database.html"}),"GORM uses ",Object(a.b)("inlineCode",{parentName:"a"},"go-sql-driver/mysql"))," to connect with MySQL/MariaDB databases, still it  does not allow us  to use existing ",Object(a.b)("inlineCode",{parentName:"p"},"*sql.DB")," connections. Instead, we need to use ",Object(a.b)("inlineCode",{parentName:"p"},"*gorm.DB"),". So, we need to create a new adapter for GORM under ",Object(a.b)("inlineCode",{parentName:"p"},"adapter/gorm/gorm.go"),"."))),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'package gorm\n\nimport (\n    "fmt"\n\n    "github.com/go-sql-driver/mysql"\n    "github.com/jinzhu/gorm"\n\n    "myapp/config"\n)\n\nfunc New(conf *config.Conf) (*gorm.DB, error) {\n    cfg := &mysql.Config{\n        Net:                  "tcp",\n        Addr:                 fmt.Sprintf("%v:%v", conf.Db.Host, conf.Db.Port),\n        DBName:               conf.Db.DbName,\n        User:                 conf.Db.Username,\n        Passwd:               conf.Db.Password,\n        AllowNativePasswords: true,\n        ParseTime:            true,\n    }\n\n    return gorm.Open("mysql", cfg.FormatDSN())\n}\n')),Object(a.b)("h2",{id:"adding-gorm-adapter-to-the-main-app"},"Adding GORM adapter to the main app"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Let's update the ",Object(a.b)("inlineCode",{parentName:"li"},"App struct")," to set the GORM connection as a dependency for our server application, by updating the ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/app.go")," (Line 9,14,18).")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import (\n    "github.com/jinzhu/gorm"\n\n    "myapp/util/logger"\n)\n\ntype App struct {\n    logger *logger.Logger\n    db     *gorm.DB\n}\n\nfunc New(\n    logger *logger.Logger,\n    db *gorm.DB,\n) *App {\n    return &App{\n        logger: logger,\n        db:     db,\n    }\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then we need to update ",Object(a.b)("inlineCode",{parentName:"li"},"cmd/app/main.go")," to get the GORM connection at the startup of the application.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'import (\n    "fmt"\n    "net/http"\n\n    dbConn "myapp/adapter/gorm"\n    "myapp/app/app"\n    "myapp/app/router"\n    "myapp/config"\n    lr "myapp/util/logger"\n)\n\nfunc main() {\n    appConf := config.AppConfig()\n\n    logger := lr.New(appConf.Debug)\n\n    db, err := dbConn.New(appConf)\n    if err != nil {\n        logger.Fatal().Err(err).Msg("")\n        return\n    }\n    if appConf.Debug {\n        db.LogMode(true)\n    }\n\n    application := app.New(logger, db)\n')),Object(a.b)("p",null,"ðŸ’¡ In here, we enable database logs according to the ",Object(a.b)("inlineCode",{parentName:"p"},"boolean")," value in ",Object(a.b)("inlineCode",{parentName:"p"},"Debug")," configurations."),Object(a.b)("h2",{id:"checking-application-health"},"Checking application health"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Adding handlers for ",Object(a.b)("a",r({parentName:"li"},{href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"}),"liveness and readiness probes")," is a common practice in modern Go applications especially while using ",Object(a.b)("a",r({parentName:"li"},{href:"https://kubernetes.io/"}),"Kubernetes")," for deployments. With that, we can check the health of GORM connection as well. So, let's add those under ",Object(a.b)("inlineCode",{parentName:"li"},"app/app/health_handler.go"),".")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'package app\n\nimport (\n    "net/http"\n)\n\n// HandleLive is an http.HandlerFunc that handles liveness checks by\n// immediately responding with an HTTP 200 status.\nfunc HandleLive(w http.ResponseWriter, _ *http.Request) {\n    writeHealthy(w)\n}\n\n// HandleReady is an http.HandlerFunc that handles readiness checks by\n// responding with an HTTP 200 status if it is healthy, 500 otherwise.\nfunc (app *App) HandleReady(w http.ResponseWriter, r *http.Request) {\n    if err := app.db.DB().Ping(); err != nil {\n        app.Logger().Fatal().Err(err).Msg("")\n        writeUnhealthy(w)\n        return\n    }\n\n    writeHealthy(w)\n}\n\nfunc writeHealthy(w http.ResponseWriter) {\n    w.Header().Set("Content-Type", "text/plain")\n    w.WriteHeader(http.StatusOK)\n    w.Write([]byte("."))\n}\n\nfunc writeUnhealthy(w http.ResponseWriter) {\n    w.Header().Set("Content-Type", "text/plain")\n    w.WriteHeader(http.StatusInternalServerError)\n    w.Write([]byte("."))\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Then, we need to update ",Object(a.b)("inlineCode",{parentName:"li"},"app/router/router.go")," to attach those handlers to the router.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-go"}),'r := chi.NewRouter()\n\n// Routes for healthz\nr.Get("/healthz/liveness", app.HandleLive)\nr.Method("GET", "/healthz/readiness", requestlog.NewHandler(a.HandleReady, l))\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Rebuild and rerun the application. You should get ",Object(a.b)("inlineCode",{parentName:"li"},"200")," HTTP status while visit ",Object(a.b)("a",r({parentName:"li"},{href:"localhost:8080/healthz/readiness"}),"localhost:8080/healthz/readiness")," in the browser if the GORM connection is healthy.")))}s.isMDXComponent=!0},70:function(e,n,t){"use strict";t.d(n,"a",function(){return p}),t.d(n,"b",function(){return d});var a=t(0),r=t.n(a),o=r.a.createContext({}),i=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},p=function(e){var n=i(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},s=function(e){var n=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,p=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),l=i(n),s=t,d=l[o+"."+s]||l[s]||c[s]||a;return n?r.a.createElement(d,Object.assign({},p,{components:n})):r.a.createElement(d,p)};function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=s;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[l]="string"==typeof e?e:a,i[1]=p;for(var d=2;d<o;d++)i[d]=t[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);